// AUTOGENERATED FILE
// This file was generated from svg-path-d.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface SvgPathDActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: IterationNode) => T;
  D?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Move?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  LineTo?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  CubicBezierCurve?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  QuadraticBezierCurve?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  EllipticalArcCurve?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  ClosePath?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ellipticalParameter?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode) => T;
  TwoPoints?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  ThreePoints?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode, arg3: IterationNode, arg4: NonterminalNode) => T;
  point?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  binaryNumber?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface SvgPathDSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: SvgPathDActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: SvgPathDActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: SvgPathDActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: SvgPathDActionDict<T>): this;
}

export interface SvgPathDGrammar extends Grammar {
  createSemantics(): SvgPathDSemantics;
  extendSemantics(superSemantics: SvgPathDSemantics): SvgPathDSemantics;
}

declare const grammar: SvgPathDGrammar;
export default grammar;

